b0,
c0){
#a0-a3: Koeffizenten für Asymptote
#b0-b3: Koeffizienten für xmid
#c0-c3: Koeffizienten für scal
Asym=a0
xmid=b0
scal=c0
#Asym=a0+a1*Y2014+a2*Y2015
#xmid=b0+b1*Y2014+b2*Y2015
#scal=c0+c1*Y2014+c2*Y2015
y=Asym/(1+exp(-(x-xmid)/scal))+2
}
library(nlme)
library(lattice)
setwd("D:/Eigene_Dateien/AA_Lehre/AWiss_Arbeiten/Master/Strieder/A_Daten_file_gesamt_11_02_2020/")
Zuwachs<-read.csv("Zuwachs.csv")
Zuwachs$TAG<-Zuwachs$TAG-90
Zuwachs$id.cm.cum.Apr1<-Zuwachs$id.cm.cum.Apr1+2
ID.vec<-c(201:235)
Kreisbach<-Zuwachs[Zuwachs$ID %in% ID.vec,]
Kreisbachg<-groupedData(id.cm.cum.Apr1 ~ TAG | ID/Jahr,  data = Kreisbach)
Logfunc<-function(x,a0,
b0,
c0){
#a0-a3: Koeffizenten für Asymptote
#b0-b3: Koeffizienten für xmid
#c0-c3: Koeffizienten für scal
Asym=a0
xmid=b0
scal=c0
#Asym=a0+a1*Y2014+a2*Y2015
#xmid=b0+b1*Y2014+b2*Y2015
#scal=c0+c1*Y2014+c2*Y2015
y=Asym/(1+exp(-(x-xmid)/scal))+2
}
Zuwachs.nlme<-nlme(id.cm.cum.Apr1 ~ Logfunc(TAG,a0,
b0,
c0),
data=Kreisbachg,
fixed = list(a0~1,
b0~1,
c0~1),
random = list(ID= pdBlocked(list(a0~1,b0~1,c0~1)),
Jahr= pdBlocked(list(a0~1,b0~1,c0~1))),
start=list(fixed=c(0.30250,
180,
24)))
Kreisbach.list<-nlsList(id.cm.cum.Apr1 ~ Logfunc(TAG,a0,
b0,
c0), data=Kreisbach)
Kreisbachg<-groupedData(id.cm.cum.Apr1 ~ TAG | ID/Jahr,  data = Kreisbach)
Kreisbach.list<-nlsList(id.cm.cum.Apr1 ~ Logfunc(TAG,a0,
b0,
c0), data=Kreisbachg)
summary(Kreisbach.list)
summary(Kreisbach.list)
Kreisbach.list<-nlsList(id.cm.cum.Apr1 ~ Logfunc(TAG,a0,
b0,
c0), data=Kreisbachg,
start=list(fixed=c(0.30250,
180,
24)))
rm(Kreisbach.list)
Kreisbach.list<-nlsList(id.cm.cum.Apr1 ~ Logfunc(TAG,a0,
b0,
c0), data=Kreisbachg,
start=list(fixed=c(0.30250,
180,
24)))
View(Kreisbach.list)
Kreisbach.list<-nlsList(id.cm.cum.Apr1 ~ Logfunc(TAG,a0,
b0,
c0), data=Kreisbachg,
start = c(a0 = 0.3, b0 = 90, c0 = 20))
summary(Kreisbach.list)
summary(Kreisbach.list)
Kreisbach.list<-nlsList(id.cm.cum.Apr1 ~ Logfunc(TAG,a0,
b0,
c0), data=Kreisbachg,
start = c(a0 = 0.25, b0 = 90, c0 = 20))
rm(Kreisbach.list)
summary(Kreisbach.list)
summary(Kreisbach.list)
Kreisbach.list<-nlsList(id.cm.cum.Apr1 ~ Logfunc(TAG,a0,
b0,
c0), data=Kreisbachg,
start = c(a0 = 0.20, b0 = 90, c0 = 20))
summary(Kreisbach.list)
Kreisbachg<-groupedData(id.cm.cum.Apr1 ~ TAG | ID/Jahr,  data = Kreisbach)
Kreisbach.list<-nlsList(id.cm.cum.Apr1 ~ Logfunc(TAG,a0,
b0,
c0), data=Kreisbachg,
start = c(a0 = 0.20, b0 = 91, c0 = 20))
summary(Kreisbach.list)
Kreisbach.list<-nlsList(id.cm.cum.Apr1 ~ Logfunc(TAG,a0,
b0,
c0), data=Kreisbachg,
start = c(a0 = 0.20, b0 = 89, c0 = 18))
summary(Kreisbach.list)
summary(Zuwachs.nlme)
ibrary(rgdal)
library(raster)
library(rgeos)
setwd("D:/Eigene_Dateien/AA_Lehre/AWiss_Arbeiten/ZDiss/A_Hahn/DTMs/DTM_end")
dhm2<-raster("Bestand2_dtm2.tif")
slope<-terrain(dhm2, type="slope", unit="degrees")
plot(dhm2)
plot(slope)
setwd("D:/Eigene_Dateien/AA_Lehre/AWiss_Arbeiten/ZDiss/A_Hahn/C_Vollauf_Plots/")
Voll<-read.csv("Daten_Vollaufnahme_final.csv")
Bestand2<-Voll[Voll$Bestand==2,]
Bestand2_sp<-SpatialPointsDataFrame(cbind(Bestand2$x_final, Bestand2$y_final), Bestand2)
plot(Bestand2_sp, add=TRUE)
plot(Bestand2_sp)
ch <- convHull(Bestand2_sp)
plot(Bestand2_sp)
ch <- convHull(Bestand2_sp)
library(sp)
ch <- convHull(Bestand2_sp)
plot(Bestand2_sp)
ch <- chull(Bestand2_sp)
plot(ch)
library(rgdal)
library(raster)
library(rgeos)
library(sp)
library(spatstat)
setwd("D:/Eigene_Dateien/AA_Lehre/AWiss_Arbeiten/ZDiss/A_Hahn/DTMs/DTM_end")
dhm2<-raster("Bestand2_dtm2.tif")
slope<-terrain(dhm2, type="slope", unit="degrees")
plot(dhm2)
plot(slope)
setwd("D:/Eigene_Dateien/AA_Lehre/AWiss_Arbeiten/ZDiss/A_Hahn/C_Vollauf_Plots/")
Voll<-read.csv("Daten_Vollaufnahme_final.csv")
Bestand2<-Voll[Voll$Bestand==2,]
Bestand2_sp<-SpatialPointsDataFrame(cbind(Bestand2$x_final, Bestand2$y_final), Bestand2)
plot(Bestand2_sp, add=TRUE)
plot(Bestand2_sp)
ch <- chull(Bestand2_sp)
plot(ch)
ch <- convHull(Bestand2_sp)
library(raster)
ch <- convHull(Bestand2_sp)
hpts <- chull(Bestand2_sp)
hpts <- chull(Bestand2$xfinal, Bestand2$y_final)
hpts <- chull(Bestand2$x_final, Bestand2$y_final)
hpts <- c(hpts, hpts[1])
lines(X[hpts, ])
lines(Bestand2[hpts, ])
dfHull <- chull(Bestand2$x_final, Bestand2$y_final)
dfHull <-cbind(x[z],y[z])  ##the convex hull expressed as a list of selected x-y points
plot(dfHull)     ##this plots the vertex of the polygon, just a check
lines(dfhull)
dfHull <- chull(Bestand2$x_final, Bestand2$y_final)
dfHull <-cbind(x[z],y[z])  ##the convex hull expressed as a list of selected x-y points
plot(dfHull)     ##this plots the vertex of the polygon, just a check
lines(dfhull)
w <- convexhull.xy(Bestand2$x_final,Bestand2$y_final)
plot(owin(), main="convexhull.xy(x,y)", lty=2)
plot(w, add=TRUE)
points(x,y)
plot(Bestand2_sp, add=TRUE)
plot(Bestand2_sp, add=TRUE)
w <- convexhull.xy(Bestand2$x_final,Bestand2$y_final)
plot(w)
plot(Bestand2$x_final, Bestand2$y_final)
plot(w, add=TRUE)
plot(owin(), main="convexhull.xy(x,y)", lty=2)
plot(w)
plot(Bestand2$x_final, Bestand2$y_final, add=TRUE)
w <- convexhull.xy(Bestand2$x_final,Bestand2$y_final)
plot(owin(), main="convexhull.xy(x,y)", lty=2)
plot(w)
plot(Bestand2$x_final, Bestand2$y_final)
plot(w, add=TRUE)
#Erstellen einer konvexen Hülle
w <- convexhull.xy(Bestand2$x_final,Bestand2$y_final)
plot(Bestand2_sp)
plot(w, add=TRUE)
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final, window=disc(2))
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final)
min(Bestand2$x_final)
max(Bestand2$x_final)
min(Bestand2$y_final)
max(Bestand2$y_final)
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
window=owin(c(1.8627,62.4484),c(-113.4534,-40.503)))
Q<-quadratcount(Bestand2.ppp, nx=6, ny=3)
Q
plot(Q, add=TRUE)
#Kernel density
K1<-density(Bestand2.ppp)
plot(K1, main=NULL, las=1)
contour(K1, add=TRUE)
plot(Bestand2.ppp, add=TRUE)
w <- convexhull.xy(Bestand2$x_final,Bestand2$y_final)
plot(Bestand2_sp)
plot(w, add=TRUE)
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
window=owin(c(1.8627,62.4484),c(-113.4534,-40.503)))
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
window=owin(c(1.8627,62.4484),c(-113.4534,-40.503)))
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=6, ny=3)
plot(Q, add=TRUE)
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
window=as.owin(w))
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=6, ny=3)
plot(Q, add=TRUE)
plot(Bestand2_sp, add=TRUE)
w <- convexhull.xy(Bestand2$x_final,Bestand2$y_final)
plot(Bestand2_sp)
plot(w, add=TRUE)
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
window=owin(c(1.8627,62.4484),c(-113.4534,-40.503)))
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
window=as.owin(w))
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=6, ny=3)
plot(Q, add=TRUE)
#Compute density for each quadrant
Q.d<-intensity(Q)
plot(intensity(Q, image=TRUE), main=NULL, las=1)
w <- convexhull.xy(Bestand2$x_final,Bestand2$y_final)
plot(Bestand2_sp)
plot(w, add=TRUE)
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
window=owin(c(1.8627,62.4484),c(-113.4534,-40.503)))
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=6, ny=3)
plot(Q, add=TRUE)
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
window=as.owin(w))
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=6, ny=3)
plot(Q, add=TRUE)
plot(Bestand2_sp)
plot(w, add=TRUE)
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
window=as.owin(w))
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=6, ny=3)
plot(Q, add=TRUE)
Q<-quadratcount(Bestand2.ppp, nx=6, ny=9)
plot(Q, add=TRUE)
#Compute density for each quadrant
Q.d<-intensity(Q)
plot(intensity(Q, image=TRUE), main=NULL, las=1)
plot
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=12, ny=12)
plot(Q, add=TRUE)
#Compute density for each quadrant
Q.d<-intensity(Q)
plot(intensity(Q, image=TRUE), main=NULL, las=1)
plot
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=25, ny=25)
plot(Q, add=TRUE)
#Compute density for each quadrant
Q.d<-intensity(Q)
plot(intensity(Q, image=TRUE), main=NULL, las=1)
plot
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=5, ny=5)
plot(Q, add=TRUE)
#Compute density for each quadrant
Q.d<-intensity(Q)
plot(intensity(Q, image=TRUE), main=NULL, las=1)
plot
#Kernel density
K1<-density(Bestand2.ppp)
plot(K1, main=NULL, las=1)
contour(K1, add=TRUE)
?density
spatstat::density.ppp()
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=5, ny=5)
plot(Q, add=TRUE)
#Compute density for each quadrant
Q.d<-intensity(Q)
plot(intensity(Q, image=TRUE), main=NULL, las=1)
plot
plot(Bestand2.ppp)
plot(Bestand2_sp, add=TRUE)
#Erstellen einer konvexen Hülle
w <- convexhull.xy(Bestand2$x_final,Bestand2$y_final)
plot(Bestand2_sp)
plot(w, add=TRUE)
# Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
#                     window=owin(c(1.8627,62.4484),c(-113.4534,-40.503)))
Bestand2.ppp <- ppp(Bestand2$x_final, Bestand2$y_final,
window=as.owin(w))
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=5, ny=5)
plot(Q, add=TRUE)
#Compute density for each quadrant
Q.d<-intensity(Q)
plot(intensity(Q, image=TRUE), main=NULL, las=1)
plot
plot(Bestand2.ppp)
plot(intensity(Q, image=TRUE), main=NULL, las=1)
plot(Bestand2_sp, add=TRUE)
Q
#Quadrat count
Q<-quadratcount(Bestand2.ppp, nx=10, ny=10)
plot(Q, add=TRUE)
#Compute density for each quadrant
Q.d<-intensity(Q)
plot(intensity(Q, image=TRUE), main=NULL, las=1)
#Kernel density
K1<-density(Bestand2.ppp)
plot(K1, main=NULL, las=1)
contour(K1, add=TRUE)
#Compute density for each quadrant
Q.d<-intensity(Q)*10000
plot(intensity(Q, image=TRUE), main=NULL, las=1)
plot(intensity(Q)*10000, image=TRUE), main=NULL, las=1)
intensity(Q)*10000
plot(intensity(Q)*10000, image=TRUE), main=NULL, las=1)
intensity(Q)*10000
plot(intensity(Q), image=TRUE), main=NULL, las=1)
plot(intensity(Q, image=TRUE), main=NULL, las=1)
plot(intensity(Q*10000, image=TRUE), main=NULL, las=1)
K1<-density(Bestand2.ppp)
plot(K1*10000, main=NULL, las=1)
contour(K1, add=TRUE)
plot(Bestand2.ppp, add=TRUE)
#Kernel density
K1<-density(Bestand2.ppp, sigma=10)
K1<-density(Bestand2.ppp, sigma=20)
plot(K1*10000, main=NULL, las=1)
#Kernel density
K1<-density(Bestand2.ppp, sigma=5)
plot(K1*10000, main=NULL, las=1)
contour(K1, add=TRUE)
#Kernel density
K1<-density(Bestand2.ppp, sigma=5)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
help(density)
#Kernel density
K1<-density(Bestand2.ppp, kernel="gauss", sigma=5)
#Kernel density
K1<-density(Bestand2.ppp, kernel="gaussian", sigma=5)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
#Kernel density
K1<-density(Bestand2.ppp, kernel="epanechnikov", sigma=5)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
#Kernel density
K1<-density(Bestand2.ppp, kernel="quartic", sigma=5)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
K1<-density(Bestand2.ppp, kernel="disc", sigma=5)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
#Kernel density
K1<-density(Bestand2.ppp, kernel="gaussian", sigma=5)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
K1<-density(Bestand2.ppp, kernel="quartic", sigma=5)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
K1<-density(Bestand2.ppp, kernel="disc", sigma=5)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
K1<-density(Bestand2.ppp, kernel="triangular", sigma=5)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
K1<-density(Bestand2.ppp, kernel="disc", sigma=8)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
K1<-density(Bestand2.ppp, kernel="disc", sigma=10)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
#Kernel density
K1<-density(Bestand2.ppp, kernel="epanechnikov", sigma=10)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
K1<-density(Bestand2.ppp, kernel="epanechnikov", sigma=3)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
K1<-density(Bestand2.ppp, kernel="epanechnikov", sigma=10)
plot(K1*10000, main=NULL, las=1)
contour(K1*10000, add=TRUE)
#Nearest neighbour distance
NN1<-mean(nndist(Bestand2.ppp, k=1))
NN2<-mean(nndist(Bestand2.ppp, k=2))
#Nearest neighbour distance
NN1<-mean(nndist(Bestand2.ppp, k=1))
NN2<-mean(nndist(Bestand2.ppp, k=2))
NN3<-mean(nndist(Bestand2.ppp, k=3))
NN4<-mean(nndist(Bestand2.ppp, k=4))
NN5<-mean(nndist(Bestand2.ppp, k=5))
NN6<-mean(nndist(Bestand2.ppp, k=6))
NN7<-mean(nndist(Bestand2.ppp, k=7))
NN8<-mean(nndist(Bestand2.ppp, k=8))
NN9<-mean(nndist(Bestand2.ppp, k=9))
NN10<-mean(nndist(Bestand2.ppp, k=10))
NN1<-nndist(Bestand2.ppp, k=1)
warnings
nndist(Bestand2.ppp, k=1)
plot(NN1)
length(NN1)
Bestand2$NN1<-nndist(Bestand2.ppp, k=1)
View(Bestand2)
Bestand2$NN2<-nndist(Bestand2.ppp, k=2)
Bestand2$NN3<-nndist(Bestand2.ppp, k=3)
Bestand2$NN4<-nndist(Bestand2.ppp, k=4)
Bestand2$NN5<-nndist(Bestand2.ppp, k=5)
Bestand2$NN6<-nndist(Bestand2.ppp, k=6)
Bestand2$NN7<-nndist(Bestand2.ppp, k=7)
Bestand2$NN8<-nndist(Bestand2.ppp, k=8)
Bestand2$NN9<-nndist(Bestand2.ppp, k=9)
Bestand2$NN10<-nndist(Bestand2.ppp, k=10)
View(Bestand2)
View(Bestand2_sp)
Bestand2_sp@data$NN1<-nndist(Bestand2.ppp, k=1)
Bestand2_sp@data$NN2<-nndist(Bestand2.ppp, k=2)
Bestand2_sp@data$NN3<-nndist(Bestand2.ppp, k=3)
Bestand2_sp@data$NN4<-nndist(Bestand2.ppp, k=4)
Bestand2_sp@data$NN5<-nndist(Bestand2.ppp, k=5)
Bestand2_sp@data$NN6<-nndist(Bestand2.ppp, k=6)
Bestand2_sp@data$NN7<-nndist(Bestand2.ppp, k=7)
Bestand2_sp@data$NN8<-nndist(Bestand2.ppp, k=8)
Bestand2_sp@data$NN9<-nndist(Bestand2.ppp, k=9)
Bestand2_sp@data$NN10<-nndist(Bestand2.ppp, k=10)
min(Bestand2_sp@data$NN1)
min(Bestand2_sp@data$NN1)
max(Bestand2_sp@data$NN1)
#Equal interval 6 Klassen
width<-range/6
range<-max(Bestand2_sp@data$NN1)-min(Bestand2_sp@data$NN1)
#Equal interval 6 Klassen
width<-range/6
vec<-c(0:6)
cuts<-min(Bestand2_sp@data$NN1)+width*vec
cuts
max(Bestand2_sp@data$NN1)
class.width<-max(Bestand2_sp@data$NN1)-min(Bestand2_sp@data$NN1)/6
cuts<-min(Bestand2_sp@data$NN1)+width*c(0:6)
cuts
min(Bestand2_sp@data$NN1)
class.width<-max(Bestand2_sp@data$NN1)-min(Bestand2_sp@data$NN1)/6
cuts<-min(Bestand2_sp@data$NN1)+width*c(0:6)
blues <- colorRampPalette(c('yellow', 'orange', 'blue', 'dark blue'))
spplot(dsp, 'NN1', cuts=cuts, col.regions=blues(6), pch=20, cex=2)
spplot(Bestand2_sp, 'NN1', cuts=cuts, col.regions=blues(6), pch=20, cex=2)
#Equal interval 6 Klassen - 2. Neareast neighbour
class.width<-max(Bestand2_sp@data$NN2)-min(Bestand2_sp@data$NN2)/6
cuts<-min(Bestand2_sp@data$NN2)+width*c(0:6)
blues <- colorRampPalette(c('yellow', 'orange', 'blue', 'dark blue'))
spplot(Bestand2_sp, 'NN2', cuts=cuts, col.regions=blues(6), pch=20, cex=2)
#Equal interval 6 Klassen - 1. Neareast neighbour
class.width<-max(Bestand2_sp@data$NN1)-min(Bestand2_sp@data$NN1)/6
cuts<-min(Bestand2_sp@data$NN1)+width*c(0:6)
blues <- colorRampPalette(c('yellow', 'orange', 'blue', 'dark blue'))
spplot(Bestand2_sp, 'NN1', cuts=cuts, col.regions=blues(6), pch=20, cex=2)
str(K1)
#Tesselierung der Fläche
K1$v
min(K1$v)
#Tesselierung der Fläche
min(!is.na(K1$v))
#Tesselierung der Fläche
max(!is.na(K1$v))
#Tesselierung der Fläche
summary(K1$v)
#Tesselierung der Fläche
min(K1$v)
#Tesselierung der Fläche
max(K1$v)
K1a<-!is.na(K1)
max(K1a$v)
K1
K1a<-!is.na(K1$v)
K1a<-K1$v[!is.na(K1$v)]
K1a<-K1$v[!is.na(K1$v)]
min(K1a)
max(K1a)
#Equal interval 6 Klassen - 3. Neareast neighbour
class.width<-max(Bestand2_sp@data$NN3)-min(Bestand2_sp@data$NN3)/6
cuts<-min(Bestand2_sp@data$NN3)+width*c(0:6)
blues <- colorRampPalette(c('yellow', 'orange', 'blue', 'dark blue'))
spplot(Bestand2_sp, 'NN3', cuts=cuts, col.regions=blues(6), pch=20, cex=2)
#Equal interval 6 Klassen - 4. Neareast neighbour
class.width<-max(Bestand2_sp@data$NN4)-min(Bestand2_sp@data$NN4)/6
cuts<-min(Bestand2_sp@data$NN4)+width*c(0:6)
blues <- colorRampPalette(c('yellow', 'orange', 'blue', 'dark blue'))
spplot(Bestand2_sp, 'NN4', cuts=cuts, col.regions=blues(6), pch=20, cex=2)
#Equal interval 6 Klassen - 1. Neareast neighbour
class.width<-max(Bestand2_sp@data$NN1)-min(Bestand2_sp@data$NN1)/6
cuts<-min(Bestand2_sp@data$NN1)+width*c(0:6)
blues <- colorRampPalette(c('yellow', 'orange', 'blue', 'dark blue'))
spplot(Bestand2_sp, 'NN1', cuts=cuts, col.regions=blues(6), pch=20, cex=2)
#Equal interval 6 Klassen - 2. Neareast neighbour
class.width<-max(Bestand2_sp@data$NN2)-min(Bestand2_sp@data$NN2)/6
cuts<-min(Bestand2_sp@data$NN2)+width*c(0:6)
blues <- colorRampPalette(c('yellow', 'orange', 'blue', 'dark blue'))
spplot(Bestand2_sp, 'NN2', cuts=cuts, col.regions=blues(6), pch=20, cex=2)
#Equal interval 6 Klassen - 4. Neareast neighbour
class.width<-max(Bestand2_sp@data$NN4)-min(Bestand2_sp@data$NN4)/6
cuts<-min(Bestand2_sp@data$NN4)+width*c(0:6)
blues <- colorRampPalette(c('yellow', 'orange', 'blue', 'dark blue'))
spplot(Bestand2_sp, 'NN4', cuts=cuts, col.regions=blues(6), pch=20, cex=2)
devtools::load_all(".")
